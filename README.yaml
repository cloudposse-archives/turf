---
#
# This is the canonical configuration for the `README.md`
# Run `make readme` to rebuild the `README.md`
#

# Name of this project
name: turf

# Logo for this project
#logo: docs/logo.png

# License of this project
license: "APACHE2"

# Canonical GitHub repo
github_repo: cloudposse/turf

# Badges to display
badges:
  - name: "Build Status"

    image: "https://github.com/cloudposse/turf/workflows/go/badge.svg"
    url: "https://github.com/cloudposse/turf/actions"
  - name: "Docker Status"
    image: "https://github.com/cloudposse/turf/workflows/docker/badge.svg"
    url: "https://github.com/cloudposse/turf/actions"
  - name: "Latest Release"
    image: "https://img.shields.io/github/release/cloudposse/turf.svg"
    url: "https://github.com/cloudposse/turf/releases/latest"
  - name: "Slack Community"
    image: "https://slack.cloudposse.com/badge.svg"
    url: "https://slack.cloudposse.com"

# Short description of this project
description: |-
  Command line utility for assisting with various automation tasks that are difficult with Terraform or other tools.

  The utility provides the following functions:
    
  * Enable AWS Security Hub in for the AWS Organization and associate all member accounts
  * Delete all of the default VPCs in an AWS account

  See `turf --help` for more details

related:
  - name: "terraform-aws-security-hub"
    description: "Terraform module to provision AWS Security Hub"
    url: "https://github.com/cloudposse/terraform-aws-security-hub"

# How to use this project
usage: |-

  ```sh
  turf --help for help
  ```

  The utility can be called directly or as a Docker container.

  ### Build the Go program locally
  ```sh
  go get

  CGO_ENABLED=0 go build -v -o "./dist/bin/turf" *.go
  ```

  ### Build the Docker image
  __NOTE__: it will download all `Go` dependencies and then build the program inside the container (see [`Dockerfile`](Dockerfile))

  ```sh
  docker build --tag turf  --no-cache=true .
  ```

  ### Run with Docker
  Run `turf` in a Docker container with local ENV vars propagated into the container's environment.
  [run_docker_with_local_env_vars.sh](examples/run_docker_with_local_env_vars.sh)

  ```sh
  docker run -i --rm \
    turf
  ```

examples: |-

  ### Delete all the VPCs in an AWS Account
  Best-practices call for not using the default VPC, but rather, creating a new set of VPCs as necessary. AWS Security 
  Hub will flag the default VPCs as non-compliant if they aren't configured with best-practices. Rather than jumping 
  through hoops, it's easier to delete to default VPCs. This task cannot be accomplished with terraform, so this command 
  is necessary. Please note that this command will also delete all of the children resources of the VPC, including 
  Subnets, Route Tables, NACLs and Internet Gateways.

  ```sh
  turf aws \
    delete-default-vpcs \
    --role arn:aws:iam::111111111111:role/acme-gbl-root-admin \
    --delete
  ```

  ### Deploy Security Hub to AWS Organization
  The AWS Security Hub administrator account manages Security Hub membership for an organization. The organization 
  management account designates the Security Hub administrator account for the organization. The organization management 
  account can designate any account in the organization, including itself.

  ```sh
  turf aws \
    securityhub \
    set-administrator-account \
    --administrator-account-role arn:aws:iam::111111111111:role/acme-gbl-security-admin \
    --root-role arn:aws:iam::222222222222:role/acme-gbl-root-admin \
    --region us-west-2
  ```

  ### Disable Security Hub Controls
  DisableSecurityHubGlobalResourceControls disables Security Hub controls related to Global Resources in regions that
  aren't collecting Global Resources. It also disables CloudTrail related controls in accounts that aren't the central
  CloudTrail account.

  https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-cis-to-disable.html
  https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-fsbp-to-disable.html

  ```sh
  turf aws \
    securityhub \
    disable-global-controls \
    --role arn:aws:iam::111111111111:role/acme-gbl-security-admin \
    --global-collector-region us-west-2
  ```

  ```sh
  turf aws \
    securityhub \
    disable-global-controls \
    --role arn:aws:iam::111111111111:role/acme-gbl-audit-admin \
    --global-collector-region us-west-2 \ 
    --cloud-trail-account
  ```

  ### Deploy GuardDuty to AWS Organization
  When you use GuardDuty with an AWS Organizations organization, you can designate any account within the organization 
  to be the GuardDuty delegated administrator. Only the organization management account can designate GuardDuty 
  delegated administrators.

  ```sh
  turf aws \
    guardduty \
    set-administrator-account \
    -administrator-account-role arn:aws:iam::111111111111:role/acme-gbl-security-admin \
    -root-role arn:aws:iam::222222222222:role/acme-gbl-root-admin \
    --region us-west-2
  ```

# Contributors to this project
contributors:
  - name: "Matt Calhoun"
    homepage: "https://github.com/mcalhoun"
    github: "mcalhoun"
